// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`schema has array type 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName {
  arrayProperty?: ArrayItem[];
  mappedArrayProperty?: ArrayItem[];
  __entity_type__?: \\"SomeInterfaceName\\";
  __permissions?: Record<string, any>;
}
export interface ArrayItem {
  __entity_type__?: \\"ArrayItem\\";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
  ArrayItem: ArrayItem;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;

exports[`schema has base schema 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName
  extends Omit<SomeBaseSchema, \\"__entity_type__\\" | \\"__permissions\\"> {
  __entity_type__?: \\"SomeInterfaceName\\";
  __permissions?: Record<string, any>;
}
export interface SomeBaseSchema {
  __entity_type__?: \\"SomeBaseSchema\\";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
  SomeBaseSchema: SomeBaseSchema;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;

exports[`schema has immutable property 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName {
  readonly immutableProperty?: string | number | boolean | string[];
  __entity_type__?: \\"SomeInterfaceName\\";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;

exports[`schema has integer type 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName {
  integerProperty?: number;
  __entity_type__?: \\"SomeInterfaceName\\";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;

exports[`schema has variable type 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export interface SomeInterfaceName {
  integerProperty?: string | number | boolean | string[];
  __entity_type__?: \\"SomeInterfaceName\\";
  __permissions?: Record<string, any>;
}
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;

exports[`schema subtype of TypedContext 1`] = `
"// :copyright: Copyright (c) 2023 ftrack

// Generated on 2023-01-31T23:00:00.000Z using schema
// from an instance running version 4.13.8 using server on https://ftrack.example.com
// Not intended to modify manually

export interface TypedContext<
  K extends TypedContextSubtype = TypedContextSubtype
> {
  __entity_type__?: K;
  __permissions?: Record<string, any>;
}
export type SomeInterfaceName = TypedContext<\\"SomeInterfaceName\\">;
export interface BasicLink {
  id: string;
  type: string;
  name: string;
}
export interface EntityTypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
}
export type EntityType = keyof EntityTypeMap;
export type EntityData<TEntityType extends EntityType = EntityType> =
  EntityTypeMap[TEntityType];
export interface TypedContextSubtypeMap {
  TypedContext: TypedContext;
  SomeInterfaceName: SomeInterfaceName;
}
export type TypedContextSubtype = keyof TypedContextSubtypeMap;

// Errors:
"
`;
